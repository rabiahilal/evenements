// Basic variables for calendar, challenges, and savings, notification 
let  calendarObject;
let selectedYear = new Date().getFullYear();
let currentEvent = null;
let selectedDate = null;
let totalSavings = 0;
let totalBooksRead = 0; // Added for reading challenge
let currentGroup = 0; // Variable to control the current group of months
let unreadNotifications = 0; // Counter for unread notifications
let notificationBell = document.getElementById('notificationBell'); // The notification bell element
let goalReached = false; // Tracks whether the goal is reached

// Initialize the calendar when the page loads
document.addEventListener('DOMContentLoaded', function () {
    const calendarEl = document.getElementById('calendar');
    const manualEvents = loadManualEventsFromStorage(); // Load manual events
    const challengeEvents = loadChallengeEventsFromStorage(); // Load challenge events

    calendarObject = new FullCalendar.Calendar(calendarEl, {
        initialView: 'dayGridMonth',
        headerToolbar: {
            left: 'prev,next today',
            center: 'title',
            right: 'dayGridMonth,timeGridWeek,timeGridDay'
        },
        editable: true,
        selectable: true,
        events: [...manualEvents, ...challengeEvents], // Combine both event types
        select: function (info) {
            selectedDate = info.startStr;
            openEventModal('add');
        },
        eventClick: function (info) {
            openEventModal('edit', info.event);
        }
    });

    calendarObject.render();
    displayMonths();
});

function saveEventsToStorage(eventType) {
    if (!calendarObject) {
        console.error('Calendar object is not initialized.');
        return;
    }
    const events = calendarObject.getEvents().filter(event =>
        eventType === 'challenge'
            ? event.extendedProps && event.extendedProps.type === 'challenge'
            : !event.extendedProps || event.extendedProps.type !== 'challenge'
    );

    const eventsToSave = events.map(event => ({
        title: event.title,
        start: event.start ? event.start.toISOString() : null,
        extendedProps: event.extendedProps || {},
    }));

    localStorage.setItem(${eventType}Events, JSON.stringify(eventsToSave));
}

function addManualEventToCalendar(title, date) {
   
        if (!calendarObject) {
        console.error('Calendar is not initialized.');
        return;
    }

    // Create a new manual event
    const newEvent = {
        title: title,
        start: date,
        allDay: true,
    };

    calendarObject.addEvent(newEvent); // Add event to calendar
    saveManualEventsToStorage(); // Save manual events separately
}



function addChallengeEventToCalendar(title, date) {
    if (!calendarObject) {
        console.error('Calendar is not initialized.');
        return;
    }

    // Create a new challenge event
    const newEvent = {
        title: title,
        start: date,
        allDay: true,
        extendedProps: {
            type: 'challenge', // Mark it as a challenge event
        },
    };

    calendarObject.addEvent(newEvent); // Add event to calendar
    saveChallengeEventsToStorage(); // Save challenge events separately
}

function addExerciseChallenge() {
    const challengeInput = document.getElementById('exerciseChallengeInput');
    const challengeText = challengeInput.value.trim();

    if (!challengeText) {
        alert('Please enter a challenge.');
        return;
    }

    const challengeList = document.getElementById('exerciseChallengeList');

    // Create a new list item
    const listItem = document.createElement('li');
    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.onchange = () => {
        if (checkbox.checked) {
            addChallengeEventToCalendar(challengeText, new Date().toISOString().split('T')[0]);
            alert(Challenge "${challengeText}" added to the calendar!);
            listItem.remove(); // Remove from the list
        }
    };

    const label = document.createElement('label');
    label.textContent = challengeText;

    listItem.appendChild(checkbox);
    listItem.appendChild(label);
    challengeList.appendChild(listItem);

    // Clear input field
    challengeInput.value = '';
}

function loadManualEventsFromStorage() {
    const storedEvents = localStorage.getItem('manualEvents');
    return storedEvents ? JSON.parse(storedEvents).map(event => ({
        title: event.title,
        start: event.start,
        allDay: true,
    })) : [];
}


function loadChallengeEventsFromStorage() {
    const storedEvents = localStorage.getItem('challengeEvents');
    return storedEvents ? JSON.parse(storedEvents).map(event => ({
        title: event.title,
        start: event.start,
        allDay: true,
        extendedProps: event.extendedProps || {},
    })) : [];
}


// Open the modal for adding or editing an event
function openEventModal(mode, event = null) {
    const modal = document.getElementById('eventModal');
    const titleInput = document.getElementById('eventTitle');
    const timeInput = document.getElementById('eventTime');
    const descriptionInput = document.getElementById('eventDescription');
    const deleteButton = document.getElementById('deleteEventButton');

    if (mode === 'add') {
        document.getElementById('eventModalTitle').textContent = 'Add Event';
        titleInput.value = '';
        timeInput.value = '';
        descriptionInput.value = '';
        deleteButton.style.display = 'none';
        currentEvent = null;
    } else {
        document.getElementById('eventModalTitle').textContent = 'Edit Event';
        titleInput.value = event.title;
        timeInput.value = event.start.toISOString().substring(11, 16);
        descriptionInput.value = event.extendedProps.description || '';
        deleteButton.style.display = 'inline-block';
        currentEvent = event;
    }

    modal.classList.add('open');
    document.getElementById('overlay').classList.add('open');
}

function saveEvent() {
    const title = document.getElementById('eventTitle').value;
    const description = document.getElementById('eventDescription').value;
    const time = document.getElementById('eventTime').value;

    if (!selectedDate) {
        alert('Please select a date.');
        return;
    }

    const dateTime = time ? `${selectedDate}T${time} `: selectedDate;
    const newEvent = {
        title,
        start: dateTime,
        allDay: !time,
        extendedProps: { description },
    };

    if (currentEvent) {
        currentEvent.remove();
    }

    calendarObject.addEvent(newEvent);

    // تحديد نوع الحدث وحفظه
    if (newEvent.extendedProps && newEvent.extendedProps.type === 'challenge') {
        saveChallengeEventsToStorage();
    } else {
        saveManualEventsToStorage();
    }

     
    // Add notification
    addNotification(Event "${title}" added to the calendar!);
    notificationBell.classList.add('red');
    closeModal('eventModal');
}


function deleteEvent() {
    if (currentEvent) {
        addNotification(Event "${currentEvent.title}" deleted.);
        currentEvent.remove();

        // تحديث التخزين بناءً على نوع الحدث
        if (currentEvent.extendedProps && currentEvent.extendedProps.type === 'challenge') {
            saveChallengeEventsToStorage();
        } else {
            saveManualEventsToStorage();
        }

        closeModal('eventModal');
    }
}




// Display month buttons
function displayMonths() {
    const monthButtonsDiv = document.getElementById('monthButtons');
    monthButtonsDiv.innerHTML = '';
    const months = [
        'January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'
    ];

    const start = currentGroup * 4;
    const end = Math.min(start + 4, months.length);

    months.slice(start, end).forEach((month, index) => {
        const button = document.createElement('button');
        button.textContent = month;
        button.onclick = () => changeMonth(start + index);
        monthButtonsDiv.appendChild(button);
    });
}



// Change the displayed month
function changeMonth(monthIndex) {
    if (!calendarObject) {
        console.error('Calendar object is not initialized.');
        return;
    }
    calendarObject.gotoDate(new Date(selectedYear, monthIndex, 1));
    addNotification(Changed to ${monthIndex + 1});
}



// Change the selected year
function changeYear() {
    selectedYear = parseInt(document.getElementById('yearSelect').value);
    calendarObject.gotoDate(new Date(selectedYear, 0, 1));
    addNotification(Year changed to ${selectedYear});
    displayMonths();
}



// Go to the next set of months
function nextMonths() {
    if ((currentGroup + 1) * 4 < 12) {
        currentGroup++;
        displayMonths();
    }
}



// Go to the previous set of months
function prevMonths() {
    if (currentGroup > 0) {
        currentGroup--;
        displayMonths();
    }
}

// Close the modal
function closeModal(modalId) {
    document.getElementById(modalId).classList.remove('open');
    document.getElementById('overlay').classList.remove('open');
}

// Notification System Functions



// Open notification center
function openNotificationCenter() {
    const notificationCenter = document.getElementById('notificationCenter');
    notificationCenter.style.display = 'block';
    unreadNotifications = 0;
    updateNotificationBadge();

    document.getElementById('notificationBell').classList.remove('red'); // Reset bell color
}



// Close notification center
function closeNotificationCenter() {
    const notificationCenter = document.getElementById('notificationCenter');
    notificationCenter.style.display = 'none';
}



// Add a new notification
function addNotification(message) {
    const notificationList = document.getElementById('notificationList');
    const notificationItem = document.createElement('li');
    notificationItem.textContent = message;
    notificationList.appendChild(notificationItem);

    unreadNotifications++;
    updateNotificationBadge();

    
    
    // Change bell color to red
    document.getElementById('notificationBell').classList.add('red');
}



// Update the notification badge
function updateNotificationBadge() {
    const badge = document.getElementById('notificationBadge');
    badge.textContent = unreadNotifications;
    badge.style.display = unreadNotifications > 0 ? 'block' : 'none';
}



// Open the saving challenge modal
function openSavingChallenge() {
    document.getElementById('savingChallengeModal').classList.add('open');
    document.getElementById('overlay').classList.add('open');
    updateSavingProgress();
}



// Add money to savings
function addMoney() {
    const amount = parseFloat(document.getElementById('moneyInput').value);
    if (amount > 0) {
        totalSavings += amount;
        document.getElementById('totalSavings').textContent = totalSavings.toFixed(2);
        updateSavingProgress();

        const coinIcon = document.createElement('div');
        coinIcon.classList.add('coin-animation');
        coinIcon.innerHTML = <i class="fas fa-coins"></i> $${amount.toFixed(2)};
        document.getElementById('coinAnimationContainer').appendChild(coinIcon);

        setTimeout(() => {
            coinIcon.style.bottom = '100px';
            coinIcon.style.opacity = '0';
        }, 100);

        setTimeout(() => {
            coinIcon.remove();
        }, 1100);

        document.getElementById('moneyInput').value = '';
    }
}



// Update the saving progress
function updateSavingProgress() {
    const savingsGoal = parseFloat(document.getElementById('savingsGoal').value) || 0;
    const progress = savingsGoal > 0 ? Math.min((totalSavings / savingsGoal) * 100, 100) : 0;
    document.getElementById('savingProgress').style.width = ${progress}%;
}



// Show the challenges modal
function showChallenges() {
    document.getElementById('challengesModal').classList.add('open');
    document.getElementById('overlay').classList.add('open');
}

function openExerciseChallenge() {
    const exerciseChallengeModal = document.getElementById('exerciseChallengeModal');
    exerciseChallengeModal.classList.add('open');
    document.getElementById('overlay').classList.add('open');
}




// Start a specific challenge
function startChallenge(type) {
    alert('${type} challenge started!');
}



// Open the profile page
function openProfile() {
    alert('Profile details go here.');
}


// Function to open the Reading Challenge modal
function openReadingChallenge() {
    // Show the Reading Challenge modal
    document.getElementById('readingChallengeModal').classList.add('open');
    // Show the overlay (dark background)
    document.getElementById('overlay').style.display = 'block';
    // Ensure the introduction text is visible
    document.getElementById('readingIntro').style.display = 'block';
    // Update the progress bar and stats
    updateReadingProgress();

    // Automatically hide the introduction text after 5 seconds
    setTimeout(() => {
        // Hide the introduction text
        document.getElementById('readingIntro').style.display = 'none';
    }, 5000); // Delay of 5 seconds
}

// Add books to the challenge
function addBooks() {
    // Get the input value for books to add
    const booksToAdd = parseInt(document.getElementById('booksInput').value, 10);

    // Check if the input is valid
    if (isNaN(booksToAdd) || booksToAdd <= 0) {
        alert('Please enter a valid number of books.');
        return;
    }

    // Check if the goal has been reached
    if (goalReached) {
        alert('You have already reached your goal! Please update your goal to continue.');
        return;
    }

    // Add the books to the total
    totalBooksRead += booksToAdd;
    updateReadingProgress();

    // Clear the input field
    document.getElementById('booksInput').value = '';
}

function updateReadingProgress() {
    // Get the current goal from the input field
    const goalInput = document.getElementById('readingGoal');
    const readingGoal = parseInt(goalInput.value, 10) || 0;

    // Calculate the progress percentage
    const progress = readingGoal > 0 ? Math.min((totalBooksRead / readingGoal) * 100, 100) : 0;

    // Update the progress bar
    document.getElementById('readingProgress').style.width = ${progress}%;
    document.getElementById('totalBooksRead').textContent = totalBooksRead;

    // Check if the goal is reached
    if (totalBooksRead >= readingGoal) {
        goalReached = true; // Set the flag to prevent further additions
        document.getElementById('congratulationsMessage').style.display = 'block'; // Show congratulations message 

        // Add a special event for achieving the goal
        const today = new Date().toISOString().split('T')[0];

        // Check if the "Goal Achieved" event already exists
        const events = calendarObject.getEvents();
        const goalEventExists = events.some(event => event.title === '🎯 Goal Achieved!' && event.start.toISOString().split('T')[0] === today);

        if (!goalEventExists) {
            addBookToCalendar('🎯 Goal Achieved!', today); // Add a goal achievement event
        }
    } else {
        goalReached = false; // Allow further additions
        document.getElementById('congratulationsMessage').style.display = 'none'; // Hide congratulations message
    }
}


// Function to reset the goal and allow more additions
function updateReadingGoal() {
    // Get the new goal value
    const newGoal = parseInt(document.getElementById('readingGoal').value, 10);

    // Check if the new goal is valid and greater than the current total
    if (isNaN(newGoal) || newGoal <= totalBooksRead) {
        alert('Please enter a valid goal that is greater than your current total books read.');
        return;
    }

    // Allow the user to add more books
    goalReached = false;
    alert('Your goal has been updated. You can now add more books!');
}


// Show congratulations message if the goal is met
if (totalBooksRead >= readingGoal) {
    // Show the congratulations message 
    document.getElementById('congratulationsMessage').style.display = 'block';

    // Set the goalReached flag to true to prevent further additions
    goalReached = true;
} else {
    // Hide the congratulations message
    document.getElementById('congratulationsMessage').style.display = 'none';
}


// Function to add a book as an event in the calendar
function addBookToCalendar(bookTitle, date) {
    // Check if the calendar object exists
    if (!calendarObject) {
        console.error('Calendar is not initialized.');
        return;
    }
    // Create a new event with the book title and date
    const newEvent = {
        title: bookTitle, // Title of the book
        start: date, // Date the book was read
        allDay: true, // Mark it as an all-day event
    };
    // Add the event to the calendar
    calendarObject.addEvent(newEvent);

    // Save the new event to storage (optional for persistence)
    saveChallengeEventsToStorage();
}
// This function hides the overlay (background shadow)
function hideOverlay() {
    const overlay = document.getElementById('overlay');
    overlay.style.display = 'none'; // Hides the overlay
}

// This function closes a modal and hides the overlay
function closeModal(modalId) {
    document.getElementById(modalId).classList.remove('open'); // Removes the 'open' class from the modal
    hideOverlay(); // Calls hideOverlay to ensure the overlay is hidden
}